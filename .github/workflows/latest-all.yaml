name: NGINX-BoringSSL (all builds)

on:
  push:
    branches:
      - boringssl-test
    paths:
      - Dockerfile
      - Dockerfile.without-modsec
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/nginx-boringssl
  GHCR_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build-file:
          - { file: Dockerfile, suffix: "" }
          - { file: Dockerfile.without-modsec, suffix: "-without_modsec" }
        platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v7
          - linux/arm/v6

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.build-file.file }}
          platforms: ${{ matrix.platform }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=registry,ref=${{ env.GHCR_IMAGE }}:cache${{ matrix.build-file.suffix }}
          cache-to: type=registry,ref=${{ env.GHCR_IMAGE }}:cache${{ matrix.build-file.suffix }},mode=max
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          PLATFORM=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          mkdir -p /tmp/digests${{ matrix.build-file.suffix }}
          digest="${{ steps.build.outputs.digest }}"
          echo $digest > /tmp/digests${{ matrix.build-file.suffix }}/$PLATFORM.txt
          ls /tmp/digests${{ matrix.build-file.suffix }}

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests${{ matrix.build-file.suffix }}-${{ matrix.platform }}
          path: /tmp/digests${{ matrix.build-file.suffix }}/*
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        build-file:
          - { file: Dockerfile, suffix: "" }
          - { file: Dockerfile.without-modsec, suffix: "-without_modsec" }

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          name: digests${{ matrix.build-file.suffix }}
          path: /tmp/digests${{ matrix.build-file.suffix }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registries
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest (DockerHub + GHCR)
        run: |
          TAG="boringssl-test${{ matrix.build-file.suffix }}"
          docker buildx imagetools create \
            -t ${{ env.DOCKER_IMAGE }}:$TAG \
            -t ${{ env.GHCR_IMAGE }}:$TAG \
            $(cat /tmp/digests${{ matrix.build-file.suffix }}/*.txt)
          
          docker buildx imagetools inspect ${{ env.DOCKER_IMAGE }}:$TAG
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:$TAG

